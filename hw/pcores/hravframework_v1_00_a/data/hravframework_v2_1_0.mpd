##############################################################################
## Filename:          /home/eagle/NetFPGA10/contrib-projects/hravcore/hw/pcores/hravframework_v1_00_a/data/hravframework_v2_1_0.mpd
## Description:       Microprocessor Peripheral Description
## Date:              Thu Oct  2 03:45:24 2014 (by Create and Import Peripheral Wizard)
##############################################################################

BEGIN hravframework

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = MIX
OPTION RUN_NGCBUILD = TRUE
OPTION IMP_NETLIST = TRUE
OPTION IP_GROUP = NetFPGA-10G Packet Manipulation
OPTION DESC = HR_AV_FRAMEWORK
OPTION LONG_DESC = HR_AV_FRAMEWORK

## IO Interfaces
IO_INTERFACE IO_IF = memory_0
IO_INTERFACE IO_IF = memory_1
IO_INTERFACE IO_IF = memory_2

## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,256), BUS = M_AXIS:S_AXIS
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS

PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, BUS = S_AXI, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), ADDRESS = BASE, PAIR = C_HIGHADDR, BUS = S_AXI, MIN_SIZE = 0x01000, ASSIGNMENT = REQUIRE
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), ADDRESS = HIGH, PAIR = C_BASEADDR, BUS = S_AXI, ASSIGNMENT = REQUIRE

## Ports
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXIS:S_AXIS, ASSIGNMENT = REQUIRE
PORT axi_resetn = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE

#anhqvn, added reset for inside logic
#to avoid reset inversion
PORT axi_reset = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE
#anhqvn, added for loopback test
PORT hrav_axis_lp = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE

PORT core_clk = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT core_clk_270 = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT sram_clk_200 = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK

PORT qdr_d_0 = "", DIR = O,  IO_IF = memory_0, VEC = [36-1:0]
PORT qdr_q_0 = "", DIR = I,  IO_IF = memory_0, VEC = [36-1:0]
PORT qdr_sa_0 = "", DIR = O,  IO_IF = memory_0, VEC = [19-1:0]
PORT qdr_w_n_0 = "", DIR = O, IO_IF = memory_0
PORT qdr_r_n_0 = "", DIR = O, IO_IF = memory_0
PORT qdr_bw_n_0 = "", DIR = O, IO_IF = memory_0, VEC = [4-1:0]
PORT qdr_dll_off_n_0 = "", DIR = O, IO_IF = memory_0
PORT qdr_cq_0 = "", DIR = I,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_cq_n_0 = "", DIR = I,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_c_n_0 = "", DIR = O,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_k_n_0 = "", DIR = O,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_c_0 = "", DIR = O,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_k_0 = "", DIR = O,  IO_IF = memory_0,  VEC = [0:0]

PORT qdr_d_1 = "", DIR = O,  IO_IF = memory_1, VEC = [36-1:0]
PORT qdr_q_1 = "", DIR = I,  IO_IF = memory_1, VEC = [36-1:0]
PORT qdr_sa_1 = "", DIR = O,  IO_IF = memory_1, VEC = [19-1:0]
PORT qdr_w_n_1 = "", DIR = O, IO_IF = memory_1
PORT qdr_r_n_1 = "", DIR = O, IO_IF = memory_1
PORT qdr_bw_n_1 = "", DIR = O, IO_IF = memory_1, VEC = [4-1:0]
PORT qdr_dll_off_n_1 = "", DIR = O, IO_IF = memory_1
PORT qdr_cq_1 = "", DIR = I,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_cq_n_1 = "", DIR = I,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_c_n_1 = "", DIR = O,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_k_n_1 = "", DIR = O,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_c_1 = "", DIR = O,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_k_1 = "", DIR = O,  IO_IF = memory_1,  VEC = [0:0]

PORT qdr_d_2 = "", DIR = O,  IO_IF = memory_2, VEC = [36-1:0]
PORT qdr_q_2 = "", DIR = I,  IO_IF = memory_2, VEC = [36-1:0]
PORT qdr_sa_2 = "", DIR = O,  IO_IF = memory_2, VEC = [19-1:0]
PORT qdr_w_n_2 = "", DIR = O, IO_IF = memory_2
PORT qdr_r_n_2 = "", DIR = O, IO_IF = memory_2
PORT qdr_bw_n_2 = "", DIR = O, IO_IF = memory_2, VEC = [4-1:0]
PORT qdr_dll_off_n_2 = "", DIR = O, IO_IF = memory_2
PORT qdr_cq_2 = "", DIR = I,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_cq_n_2 = "", DIR = I,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_c_n_2 = "", DIR = O,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_k_n_2 = "", DIR = O,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_c_2 = "", DIR = O,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_k_2 = "", DIR = O,  IO_IF = memory_2,  VEC = [0:0]

PORT masterbank_sel_pin = "", DIR = I,  IO_IF = memory_0,  VEC = [2:0]

PORT locked = "", DIR = I, ASSIGNMENT = REQUIRE

PORT m_axis_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tstrb = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tuser = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tvalid = TVALID, DIR = O, BUS = M_AXIS
PORT m_axis_tready = TREADY, DIR = I, BUS = M_AXIS
PORT m_axis_tlast = TLAST, DIR = O, BUS = M_AXIS

PORT s_axis_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tstrb = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tuser = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tvalid = TVALID, DIR = I, BUS = S_AXIS
PORT s_axis_tready = TREADY, DIR = O, BUS = S_AXIS
PORT s_axis_tlast = TLAST, DIR = I, BUS = S_AXIS

## connect AXI slave for testing
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [3:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI

END
